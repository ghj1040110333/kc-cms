<!doctype HTML>
<html>
<head>
    <meta charset="utf-8" />
    <title>pagination-api</title>
    <link rel="stylesheet" href="../lib/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="../lib/bootstrap/css/bootstrap-theme.min.css">
    <link rel="stylesheet" href="../lib/prettify/prettify.css">
    <link rel="stylesheet" href="../css/wendang/main.css">
    <script src="../lib/jquery/jquery-2.1.1.min.js"></script>
    <script src="../lib/bootstrap/js/bootstrap.min.js"></script>
    <script src="../js/index.js"></script>
    <script src="../lib/prettify/prettify.js"></script>
        <style>
    .prettyprint {
background-color: #141424;
}
.kwd, .linenums .tag {
color: #E562D0;
}
.pln {
color: #0EDBE4;
}.pun, .opn, .clo {
color: #2EA016;
}.str, .atv {
color: #ED5353;
}
ol.linenums li {
text-shadow:none;color: #05A391;
}
    </style>
</head>
<body onload="prettyPrint();">
<h1 class="h1Bot" style="color:#313447;">pagination-api源码</h1>
<blockquote><article style="padding-left:0;">
<pre class="prettyprint linenums">
var express = require(&#39;express&#39;);
var kcool = require(&#39;./lib/kcool&#39;);
var  objects = require(&#39;./lib/object&#39;);
var pagination = new objects.kangjian;
module.exports = pagination;

pagination.create_links = function create_links(total_rows,per_page,per_pages,base_url) {

    var query_string_segment     = &#39;per_page&#39;;
    var base_url            =  kcool.trim(base_url)+query_string_segment+&#39;=&#39;;         // 定义路径
    var total_rows            =  total_rows;     //数据库返回博客总数量数据
    var per_page            =  per_page;         //每页显示文章数目
    var num_links            =  4;//定义大于num_links时显示第一页和最后一页
    var use_page_numbers        = parseInt(per_pages);     // 当前所就收的页码
    var first_link            = &#39;First&#39;;
    var next_link            = &#39;&raquo;&#39;;
    var prev_link            = &#39;&laquo;&#39;;
    var last_link            = &#39;Last&#39;;
    var full_tag_open        = &#39;&lt;div class=&quot;pagination pagination-centered&quot;&gt;&lt;ul class=&quot;pagination pagination-lg&quot;&gt;&#39;;
    var full_tag_close        = &#39;&lt;/ul&gt;&lt;/div&gt;&#39;;
    var first_tag_open        = &#39;&lt;li class=&quot;prev page&quot;&gt;&#39;;
    var first_tag_close        = &#39;&lt;/li&gt;&#39;;
    var last_tag_open        = &#39;&lt;li class=&quot;next page&quot;&gt;&#39;;
    var last_tag_close        = &#39;&lt;/li&gt;&#39;;
    var cur_tag_open        = &#39;&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;&quot;&gt;&#39;;
    var cur_tag_close        = &#39;&lt;/a&gt;&lt;/li&gt;&#39;;
    var next_tag_open        = &#39;&lt;li class=&quot;next page&quot;&gt;&#39;;
    var next_tag_close        = &#39;&lt;/li&gt;&#39;;
    var prev_tag_open        = &#39;&lt;li class=&quot;prev page&quot;&gt;&#39;;
    var prev_tag_close        = &#39;&lt;/li&gt;&#39;;
    var num_tag_open        = &#39;&lt;li class=&quot;page&quot;&gt;&#39;;
    var num_tag_close        = &#39;&lt;/li&gt;&#39;;
    var display_pages        = &#39;TRUE&#39;;
    var display_next_pages        = &#39;FALSE&#39;;
    var display_last_pages        = &#39;FALSE&#39;;
    var display_prev_pages        = &#39;FALSE&#39;;
    var display_first_pages        = &#39;FALSE&#39;;    //FALSE
    var start,
    end,
    i,
    output = &#39;&#39;,// 编辑分页插件
    cache_page,//缓存当前页码
    first_url,
    base_page = 1,
    num_pages = parseInt(Math.ceil(total_rows / per_page));//定义总的页数,Math.ceil()向上取整,有小数就整数部分加1;num_pages是页数
    if (use_page_numbers) {
        cache_page = use_page_numbers;
        if ( isNaN(cache_page)) {//如果缓存的页码不是数字则定义缓存页码为１
            cache_page = base_page;
        };
        if (cache_page &gt; num_pages) {//如果缓存的页码大于总的页数
            cache_page = num_pages;
        }
    }else {
        cache_page = num_pages;//接收不到所在页码use_page_numbers时，则设定缓存页码为最后一张页数
    }
    var output_string = {
        first_pages_onclick: function(a,b,c,d){
            return a+&#39;&lt;a &#39;+&#39;href=&quot;&#39;+b+&#39;&quot;&gt;&#39;+c+&#39;&lt;/a&gt;&#39;+d;
        },
        first_pages_no_onclick: function(a,b,c){
            return a+&#39;&lt;a style=&quot;background-color: #428bca;color: #fff;border-color: #428bca;&quot;&gt;&#39;+b+&#39;&lt;/a&gt;&#39;+c;
        },
        prev_pages_onclick: function(prev_tag_open,base_url,prev_link,prev_tag_close,cache_page){
            var i = ((cache_page - 1) == 0) ? &#39;&#39; : (cache_page - 1);
            return prev_tag_open+&#39;&lt;a &#39;+&#39;href=&quot;&#39;+base_url+i+&#39;&quot;&gt;&#39;+prev_link+&#39;&lt;/a&gt;&#39;+prev_tag_close;
        },
        prev_pages_no_onclick: function(prev_tag_open,prev_link,prev_tag_close){
            return prev_tag_open+&#39;&lt;a style=&quot;background-color: #428bca;color: #fff;border-color: #428bca;&quot;&gt;&#39;+prev_link+&#39;&lt;/a&gt;&#39;+prev_tag_close;
        },
        pages: function(num_tag_open,base_url,n,i,num_tag_close){
            return num_tag_open+&#39;&lt;a &#39;+&#39;href=&quot;&#39;+base_url+n+&#39;&quot;&gt;&#39;+i+&#39;&lt;/a&gt;&#39;+num_tag_close;
        },
        next_pages_onclick: function(next_tag_open,base_url,next_link,next_tag_close,cache_page){
            return next_tag_open+&#39;&lt;a &#39;+&#39;href=&quot;&#39;+base_url+(cache_page + 1)+&#39;&quot;&gt;&#39;+next_link+&#39;&lt;/a&gt;&#39;+next_tag_close;
        },
        next_pages_no_onclick: function(next_tag_open,next_link,next_tag_close){
            return next_tag_open+&#39;&lt;a style=&quot;background-color: #428bca;color: #fff;border-color: #428bca;&quot;&gt;&#39;+next_link+&#39;&lt;/a&gt;&#39;+next_tag_close;
        },
        last_pages_onclick: function(last_tag_open,base_url,last_link,last_tag_close,num_pages){
            return last_tag_open+&#39;&lt;a &#39;+&#39;href=&quot;&#39;+base_url+num_pages+&#39;&quot;&gt;&#39;+last_link+&#39;&lt;/a&gt;&#39;+last_tag_close;
        },
        last_pages_no_onclick: function(last_tag_open,last_link,last_tag_close){
            return last_tag_open+&#39;&lt;a style=&quot;background-color: #428bca;color: #fff;border-color: #428bca;&quot;&gt;&#39;+last_link+&#39;&lt;/a&gt;&#39;+last_tag_close;
        },
    };
    // definition &quot;First&quot; link 定义第一页
    if (display_first_pages !== &#39;TRUE&#39;) {
        if  ( first_link  &amp;&amp; cache_page &gt; num_links) {//当存在第一页标识且页数大于设定的num_links时，显示第一页
            first_url = (first_url == undefined ) ? base_url+1 : &#39;&#39;;//第一页的链接路径
            output += output_string.first_pages_onclick(first_tag_open,first_url,first_link,first_tag_close);
        }
    }else{//固定显示第一页
        first_url = (first_url == undefined ) ? base_url+1 : &#39;&#39;;//第一页的链接路径
        if( use_page_numbers == 1){//如果是第一页则禁止点击
            output += output_string.first_pages_no_onclick(first_tag_open,first_link,first_tag_close);
        }else{
            output += output_string.first_pages_onclick(first_tag_open,first_url,first_link,first_tag_close);
        }
    }
    // definition &quot;previous&quot; link 定义上一页
    if (display_prev_pages !== &#39;TRUE&#39;) {
        if  ( prev_link  &amp;&amp; cache_page != 1) {//存在上一页且不为第一页
            output += output_string.prev_pages_onclick(prev_tag_open,base_url,prev_link,prev_tag_close,cache_page);
        }
    }else{
        if( use_page_numbers == 1){
            output += output_string.prev_pages_no_onclick(prev_tag_open,prev_link,prev_tag_close);
        }else{
            output += output_string.prev_pages_onclick(prev_tag_open,base_url,prev_link,prev_tag_close,cache_page);
        }
    }
    // definition pages 定义分页中间部分
    if (display_pages !== &#39;FALSE&#39;) {
        start = ((cache_page - num_links) &gt; 0) ? cache_page - (num_links - 1) : 1;
        end   = ((cache_page + num_links) &lt; num_pages) ? cache_page + num_links : num_pages;
        for (i = start -1; i &lt;= end; i++) {
            if (i &gt;= base_page) {
                if (cache_page == i) {//缓存的页码等于i，即当前选中的页码
                    output += cur_tag_open+i+cur_tag_close;
                }else {
                    n = (i == base_page) ? 1 : i;
                    if( (use_page_numbers &lt;= 3) || ( use_page_numbers +3 &gt; num_pages )) {
                        var cache1 = (( (use_page_numbers +3&gt; num_pages )&amp;&amp;(use_page_numbers +2 &lt;= num_pages)&amp;&amp;(use_page_numbers &gt; 3) ) ? use_page_numbers : &#39;&#39;);
                        var cache2 = (( (use_page_numbers +2&gt; num_pages )&amp;&amp;(use_page_numbers +1&lt;= num_pages )&amp;&amp;(use_page_numbers &gt; 3)) ? use_page_numbers : &#39;&#39;);
                        var cache3 = (( (use_page_numbers +1&gt; num_pages )&amp;&amp;(use_page_numbers &lt;= num_pages )&amp;&amp;(use_page_numbers &gt; 3)) ? use_page_numbers : &#39;&#39;);
                        switch( use_page_numbers ){
                            case 1:if( n &gt;= use_page_numbers &amp;&amp; n &lt;= (use_page_numbers + 3) ){
                                    output += output_string.pages(num_tag_open,base_url,n,i,num_tag_close);
                                }
                            break;
                            case 2:if( n &gt;= (use_page_numbers-1) &amp;&amp; n &lt;= (use_page_numbers + 2) ){
                                    output += output_string.pages(num_tag_open,base_url,n,i,num_tag_close);
                                }
                            break;
                            case 3:if( n &gt;= (use_page_numbers-2) &amp;&amp; n &lt;= (use_page_numbers + 1) ){
                                    output += output_string.pages(num_tag_open,base_url,n,i,num_tag_close);
                                }
                            break;
                            case cache1:if( n &gt;= (use_page_numbers-1) &amp;&amp; n &lt;= (use_page_numbers + 2) ){
                                    output += output_string.pages(num_tag_open,base_url,n,i,num_tag_close);
                                }
                            break;
                            case cache2:if( n &gt;= (use_page_numbers-2) &amp;&amp; n &lt;= (use_page_numbers + 1) ){
                                    output += output_string.pages(num_tag_open,base_url,n,i,num_tag_close);
                                }
                            break;
                            case cache3:if( n &gt;= (use_page_numbers-3) &amp;&amp; n &lt;= use_page_numbers ){
                                    output += output_string.pages(num_tag_open,base_url,n,i,num_tag_close);
                                }
                            break;
                        }
                    }else{
                        if( n &gt;= (use_page_numbers - 2) &amp;&amp; n &lt;=(use_page_numbers + 1) ){
                            output += output_string.pages(num_tag_open,base_url,n,i,num_tag_close);
                        }
                    }
                }
            }
        }
    }
    // definition &quot;next&quot; link 定义下一页
    if (display_next_pages !== &#39;TRUE&#39;) {
        if ( next_link &amp;&amp; cache_page &lt; num_pages) {
            output += output_string.next_pages_onclick(next_tag_open,base_url,next_link,next_tag_close,cache_page);
        }
    }else{
        if( use_page_numbers == num_pages){
            output += output_string.next_pages_no_onclick(next_tag_open,next_link,next_tag_close);
        }else{
            output += output_string.next_pages_onclick(next_tag_open,base_url,next_link,next_tag_close,cache_page);
        }
    }
    // definition &quot;Last&quot; link 定义最后一页链接按钮
    if (display_last_pages !== &#39;TRUE&#39;) {
        if ( last_link &amp;&amp; (cache_page + num_links) &lt;= num_pages) {
            output += output_string.last_pages_onclick(last_tag_open,base_url,last_link,last_tag_close,num_pages);
        }
    }else{
        if( use_page_numbers == num_pages){
            output += output_string.last_pages_no_onclick(last_tag_open,last_link,last_tag_close);
        }else{
            output += output_string.last_pages_onclick(last_tag_open,base_url,last_link,last_tag_close,num_pages);
        }
    }
    output = output.replace(&quot;#([^:])//+#&quot;, &quot;\\1/&quot;);
    output = full_tag_open+output+full_tag_close;
    return output;
}</pre>
     </blockquote>
    </article>

    <style>
    #gotop {
background: url(../../img/backup.png);
position: fixed;
z-index: 93;
right: 30px;color: none;
cursor: pointer;
width: 33px;
height: 33px;
bottom: 50px;
}
    </style>
    <div class="gobackheader">
        <a id="gotop" href="javascript:void(0)" ></a>
    </div>
</body>
</html>
